//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
pub struct CandyGuard {
    pub discriminator: [u8; 8],
    pub base: Pubkey,
    pub bump: u8,
    pub authority: Pubkey,
}

impl CandyGuard {
    pub const LEN: usize = 73;

    pub fn find_pda(base: &Pubkey) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &["candy_guard".as_bytes(), base.as_ref()],
            &crate::MPL_CORE_CANDY_GUARD_ID,
        )
    }
    pub fn create_pda(
        base: Pubkey,
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &["candy_guard".as_bytes(), base.as_ref(), &[bump]],
            &crate::MPL_CORE_CANDY_GUARD_ID,
        )
    }
}

impl<'a> TryFrom<&'a solana_program::account_info::AccountInfo<'a>> for CandyGuard {
    type Error = std::io::Error;

    fn try_from(
        account_info: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
