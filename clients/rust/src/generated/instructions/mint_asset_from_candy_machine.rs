//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MintAssetFromCandyMachine {
    /// Candy machine account.
    pub candy_machine: solana_program::pubkey::Pubkey,
    /// Candy machine authority account. This is the account that holds a delegate
    /// to verify an item into the collection.
    ///
    pub authority_pda: solana_program::pubkey::Pubkey,
    /// Candy machine mint authority (mint only allowed for the mint_authority).
    pub mint_authority: solana_program::pubkey::Pubkey,
    /// Payer for the transaction and account allocation (rent).
    pub payer: solana_program::pubkey::Pubkey,
    /// NFT account owner.
    ///
    pub asset_owner: solana_program::pubkey::Pubkey,
    /// Mint account of the NFT. The account will be initialized if necessary.
    ///
    pub asset: (solana_program::pubkey::Pubkey, bool),
    /// Mint account of the collection NFT.
    ///
    pub collection: solana_program::pubkey::Pubkey,
    /// Token Metadata program.
    ///
    pub mpl_core_program: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// Instructions sysvar account.
    ///
    pub sysvar_instructions: solana_program::pubkey::Pubkey,
    /// SlotHashes sysvar cluster data.
    ///
    pub recent_slothashes: solana_program::pubkey::Pubkey,
}

impl MintAssetFromCandyMachine {
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction(
        &self,
        args: MintAssetFromCandyMachineInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11);
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.asset_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset.0,
            self.asset.1,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.recent_slothashes,
            false,
        ));
        let mut data = MintAssetFromCandyMachineInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_MACHINE_CORE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct MintAssetFromCandyMachineInstructionData {
    discriminator: [u8; 8],
}

impl MintAssetFromCandyMachineInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [84, 175, 211, 156, 56, 250, 104, 118],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct MintAssetFromCandyMachineInstructionArgs {
    pub plugins: Vec<PluginAuthorityPair>,
}

/// Instruction builder.
#[derive(Default)]
pub struct MintAssetFromCandyMachineBuilder {
    candy_machine: Option<solana_program::pubkey::Pubkey>,
    authority_pda: Option<solana_program::pubkey::Pubkey>,
    mint_authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    asset_owner: Option<solana_program::pubkey::Pubkey>,
    asset: Option<(solana_program::pubkey::Pubkey, bool)>,
    collection: Option<solana_program::pubkey::Pubkey>,
    mpl_core_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    recent_slothashes: Option<solana_program::pubkey::Pubkey>,
    plugins: Option<Vec<PluginAuthorityPair>>,
}

impl MintAssetFromCandyMachineBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Candy machine account.
    #[inline(always)]
    pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
        self.candy_machine = Some(candy_machine);
        self
    }
    /// Candy machine authority account. This is the account that holds a delegate
    /// to verify an item into the collection.
    ///
    #[inline(always)]
    pub fn authority_pda(&mut self, authority_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority_pda = Some(authority_pda);
        self
    }
    /// Candy machine mint authority (mint only allowed for the mint_authority).
    #[inline(always)]
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_authority = Some(mint_authority);
        self
    }
    /// Payer for the transaction and account allocation (rent).
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// NFT account owner.
    ///
    #[inline(always)]
    pub fn asset_owner(&mut self, asset_owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asset_owner = Some(asset_owner);
        self
    }
    /// Mint account of the NFT. The account will be initialized if necessary.
    ///
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey, as_signer: bool) -> &mut Self {
        self.asset = Some((asset, as_signer));
        self
    }
    /// Mint account of the collection NFT.
    ///
    #[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    /// Token Metadata program.
    ///
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Instructions sysvar account.
    ///
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    /// SlotHashes sysvar cluster data.
    ///
    #[inline(always)]
    pub fn recent_slothashes(
        &mut self,
        recent_slothashes: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn plugins(&mut self, plugins: Vec<PluginAuthorityPair>) -> &mut Self {
        self.plugins = Some(plugins);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = MintAssetFromCandyMachine {
            candy_machine: self.candy_machine.expect("candy_machine is not set"),
            authority_pda: self.authority_pda.expect("authority_pda is not set"),
            mint_authority: self.mint_authority.expect("mint_authority is not set"),
            payer: self.payer.expect("payer is not set"),
            asset_owner: self.asset_owner.expect("asset_owner is not set"),
            asset: self.asset.expect("asset is not set"),
            collection: self.collection.expect("collection is not set"),
            mpl_core_program: self.mpl_core_program.unwrap_or(solana_program::pubkey!(
                "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            sysvar_instructions: self.sysvar_instructions.unwrap_or(solana_program::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
            recent_slothashes: self.recent_slothashes.unwrap_or(solana_program::pubkey!(
                "SysvarS1otHashes111111111111111111111111111"
            )),
        };
        let args = MintAssetFromCandyMachineInstructionArgs {
            plugins: self.plugins.clone().expect("plugins is not set"),
        };

        accounts.instruction(args)
    }
}

/// `mint_asset_from_candy_machine` CPI instruction.
pub struct MintAssetFromCandyMachineCpi<'a> {
    /// The program to invoke.
    pub __program: &'a solana_program::account_info::AccountInfo<'a>,
    /// Candy machine account.
    pub candy_machine: &'a solana_program::account_info::AccountInfo<'a>,
    /// Candy machine authority account. This is the account that holds a delegate
    /// to verify an item into the collection.
    ///
    pub authority_pda: &'a solana_program::account_info::AccountInfo<'a>,
    /// Candy machine mint authority (mint only allowed for the mint_authority).
    pub mint_authority: &'a solana_program::account_info::AccountInfo<'a>,
    /// Payer for the transaction and account allocation (rent).
    pub payer: &'a solana_program::account_info::AccountInfo<'a>,
    /// NFT account owner.
    ///
    pub asset_owner: &'a solana_program::account_info::AccountInfo<'a>,
    /// Mint account of the NFT. The account will be initialized if necessary.
    ///
    pub asset: (&'a solana_program::account_info::AccountInfo<'a>, bool),
    /// Mint account of the collection NFT.
    ///
    pub collection: &'a solana_program::account_info::AccountInfo<'a>,
    /// Token Metadata program.
    ///
    pub mpl_core_program: &'a solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'a solana_program::account_info::AccountInfo<'a>,
    /// Instructions sysvar account.
    ///
    pub sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
    /// SlotHashes sysvar cluster data.
    ///
    pub recent_slothashes: &'a solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MintAssetFromCandyMachineInstructionArgs,
}

impl<'a> MintAssetFromCandyMachineCpi<'a> {
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11);
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.asset_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.0.key,
            self.asset.1,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_instructions.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.recent_slothashes.key,
            false,
        ));
        let mut data = MintAssetFromCandyMachineInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_MACHINE_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1);
        account_infos.push(self.__program.clone());
        account_infos.push(self.candy_machine.clone());
        account_infos.push(self.authority_pda.clone());
        account_infos.push(self.mint_authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.asset_owner.clone());
        account_infos.push(self.asset.0.clone());
        account_infos.push(self.collection.clone());
        account_infos.push(self.mpl_core_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.sysvar_instructions.clone());
        account_infos.push(self.recent_slothashes.clone());

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// `mint_asset_from_candy_machine` CPI instruction builder.
pub struct MintAssetFromCandyMachineCpiBuilder<'a> {
    instruction: Box<MintAssetFromCandyMachineCpiBuilderInstruction<'a>>,
}

impl<'a> MintAssetFromCandyMachineCpiBuilder<'a> {
    pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MintAssetFromCandyMachineCpiBuilderInstruction {
            __program: program,
            candy_machine: None,
            authority_pda: None,
            mint_authority: None,
            payer: None,
            asset_owner: None,
            asset: None,
            collection: None,
            mpl_core_program: None,
            system_program: None,
            sysvar_instructions: None,
            recent_slothashes: None,
            plugins: None,
        });
        Self { instruction }
    }
    /// Candy machine account.
    #[inline(always)]
    pub fn candy_machine(
        &mut self,
        candy_machine: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine = Some(candy_machine);
        self
    }
    /// Candy machine authority account. This is the account that holds a delegate
    /// to verify an item into the collection.
    ///
    #[inline(always)]
    pub fn authority_pda(
        &mut self,
        authority_pda: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority_pda = Some(authority_pda);
        self
    }
    /// Candy machine mint authority (mint only allowed for the mint_authority).
    #[inline(always)]
    pub fn mint_authority(
        &mut self,
        mint_authority: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_authority = Some(mint_authority);
        self
    }
    /// Payer for the transaction and account allocation (rent).
    #[inline(always)]
    pub fn payer(&mut self, payer: &'a solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// NFT account owner.
    ///
    #[inline(always)]
    pub fn asset_owner(
        &mut self,
        asset_owner: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.asset_owner = Some(asset_owner);
        self
    }
    /// Mint account of the NFT. The account will be initialized if necessary.
    ///
    #[inline(always)]
    pub fn asset(
        &mut self,
        asset: &'a solana_program::account_info::AccountInfo<'a>,
        as_signer: bool,
    ) -> &mut Self {
        self.instruction.asset = Some((asset, as_signer));
        self
    }
    /// Mint account of the collection NFT.
    ///
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    /// Token Metadata program.
    ///
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Instructions sysvar account.
    ///
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    /// SlotHashes sysvar cluster data.
    ///
    #[inline(always)]
    pub fn recent_slothashes(
        &mut self,
        recent_slothashes: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn plugins(&mut self, plugins: Vec<PluginAuthorityPair>) -> &mut Self {
        self.instruction.plugins = Some(plugins);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> MintAssetFromCandyMachineCpi<'a> {
        let args = MintAssetFromCandyMachineInstructionArgs {
            plugins: self
                .instruction
                .plugins
                .clone()
                .expect("plugins is not set"),
        };

        MintAssetFromCandyMachineCpi {
            __program: self.instruction.__program,

            candy_machine: self
                .instruction
                .candy_machine
                .expect("candy_machine is not set"),

            authority_pda: self
                .instruction
                .authority_pda
                .expect("authority_pda is not set"),

            mint_authority: self
                .instruction
                .mint_authority
                .expect("mint_authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            asset_owner: self
                .instruction
                .asset_owner
                .expect("asset_owner is not set"),

            asset: self.instruction.asset.expect("asset is not set"),

            collection: self.instruction.collection.expect("collection is not set"),

            mpl_core_program: self
                .instruction
                .mpl_core_program
                .expect("mpl_core_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            sysvar_instructions: self
                .instruction
                .sysvar_instructions
                .expect("sysvar_instructions is not set"),

            recent_slothashes: self
                .instruction
                .recent_slothashes
                .expect("recent_slothashes is not set"),
            __args: args,
        }
    }
}

struct MintAssetFromCandyMachineCpiBuilderInstruction<'a> {
    __program: &'a solana_program::account_info::AccountInfo<'a>,
    candy_machine: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    authority_pda: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    mint_authority: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    asset_owner: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    asset: Option<(&'a solana_program::account_info::AccountInfo<'a>, bool)>,
    collection: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    mpl_core_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    recent_slothashes: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    plugins: Option<Vec<PluginAuthorityPair>>,
}
