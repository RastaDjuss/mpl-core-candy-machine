//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::GuardType;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Route {
    pub candy_guard: solana_program::pubkey::Pubkey,

    pub candy_machine: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,
}

impl Route {
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction(
        &self,
        args: RouteInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3);
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.candy_guard,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        let mut data = RouteInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_GUARD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct RouteInstructionData {
    discriminator: [u8; 8],
}

impl RouteInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct RouteInstructionArgs {
    pub guard: GuardType,
    pub data: Vec<u8>,
    pub group: Option<String>,
}

/// Instruction builder.
#[derive(Default)]
pub struct RouteBuilder {
    candy_guard: Option<solana_program::pubkey::Pubkey>,
    candy_machine: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    guard: Option<GuardType>,
    data: Option<Vec<u8>>,
    group: Option<String>,
}

impl RouteBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn candy_guard(&mut self, candy_guard: solana_program::pubkey::Pubkey) -> &mut Self {
        self.candy_guard = Some(candy_guard);
        self
    }
    #[inline(always)]
    pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
        self.candy_machine = Some(candy_machine);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn guard(&mut self, guard: GuardType) -> &mut Self {
        self.guard = Some(guard);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: Vec<u8>) -> &mut Self {
        self.data = Some(data);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn group(&mut self, group: String) -> &mut Self {
        self.group = Some(group);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = Route {
            candy_guard: self.candy_guard.expect("candy_guard is not set"),
            candy_machine: self.candy_machine.expect("candy_machine is not set"),
            payer: self.payer.expect("payer is not set"),
        };
        let args = RouteInstructionArgs {
            guard: self.guard.clone().expect("guard is not set"),
            data: self.data.clone().expect("data is not set"),
            group: self.group.clone(),
        };

        accounts.instruction(args)
    }
}

/// `route` CPI instruction.
pub struct RouteCpi<'a> {
    /// The program to invoke.
    pub __program: &'a solana_program::account_info::AccountInfo<'a>,

    pub candy_guard: &'a solana_program::account_info::AccountInfo<'a>,

    pub candy_machine: &'a solana_program::account_info::AccountInfo<'a>,

    pub payer: &'a solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: RouteInstructionArgs,
}

impl<'a> RouteCpi<'a> {
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3);
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.candy_guard.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        let mut data = RouteInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_GUARD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + 1);
        account_infos.push(self.__program.clone());
        account_infos.push(self.candy_guard.clone());
        account_infos.push(self.candy_machine.clone());
        account_infos.push(self.payer.clone());

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// `route` CPI instruction builder.
pub struct RouteCpiBuilder<'a> {
    instruction: Box<RouteCpiBuilderInstruction<'a>>,
}

impl<'a> RouteCpiBuilder<'a> {
    pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RouteCpiBuilderInstruction {
            __program: program,
            candy_guard: None,
            candy_machine: None,
            payer: None,
            guard: None,
            data: None,
            group: None,
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn candy_guard(
        &mut self,
        candy_guard: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_guard = Some(candy_guard);
        self
    }
    #[inline(always)]
    pub fn candy_machine(
        &mut self,
        candy_machine: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine = Some(candy_machine);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'a solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn guard(&mut self, guard: GuardType) -> &mut Self {
        self.instruction.guard = Some(guard);
        self
    }
    #[inline(always)]
    pub fn data(&mut self, data: Vec<u8>) -> &mut Self {
        self.instruction.data = Some(data);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn group(&mut self, group: String) -> &mut Self {
        self.instruction.group = Some(group);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> RouteCpi<'a> {
        let args = RouteInstructionArgs {
            guard: self.instruction.guard.clone().expect("guard is not set"),
            data: self.instruction.data.clone().expect("data is not set"),
            group: self.instruction.group.clone(),
        };

        RouteCpi {
            __program: self.instruction.__program,

            candy_guard: self
                .instruction
                .candy_guard
                .expect("candy_guard is not set"),

            candy_machine: self
                .instruction
                .candy_machine
                .expect("candy_machine is not set"),

            payer: self.instruction.payer.expect("payer is not set"),
            __args: args,
        }
    }
}

struct RouteCpiBuilderInstruction<'a> {
    __program: &'a solana_program::account_info::AccountInfo<'a>,
    candy_guard: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    candy_machine: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    guard: Option<GuardType>,
    data: Option<Vec<u8>>,
    group: Option<String>,
}
