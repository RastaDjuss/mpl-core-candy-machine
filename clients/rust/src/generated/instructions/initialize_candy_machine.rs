//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::ConfigLineSettings;
use crate::generated::types::HiddenSettings;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct InitializeCandyMachine {
    /// Candy Machine account. The account space must be allocated to allow accounts larger
    /// than 10kb.
    ///
    pub candy_machine: solana_program::pubkey::Pubkey,
    /// Authority PDA used to verify minted NFTs to the collection.
    ///
    pub authority_pda: solana_program::pubkey::Pubkey,
    /// Candy Machine authority. This is the address that controls the upate of the candy machine.
    ///
    pub authority: solana_program::pubkey::Pubkey,
    /// Payer of the transaction.
    pub payer: solana_program::pubkey::Pubkey,
    /// Mint account of the collection.
    ///
    pub collection: solana_program::pubkey::Pubkey,
    /// Update authority of the collection. This needs to be a signer so the candy
    /// machine can approve a delegate to verify minted NFTs to the collection.
    pub collection_update_authority: solana_program::pubkey::Pubkey,
    /// Token Metadata program.
    ///
    pub mpl_core_program: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// Instructions sysvar account.
    ///
    pub sysvar_instructions: solana_program::pubkey::Pubkey,
}

impl InitializeCandyMachine {
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction(
        &self,
        args: InitializeCandyMachineInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9);
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection_update_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false,
        ));
        let mut data = InitializeCandyMachineInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_MACHINE_CORE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct InitializeCandyMachineInstructionData {
    discriminator: [u8; 8],
}

impl InitializeCandyMachineInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct InitializeCandyMachineInstructionArgs {
    pub items_available: u64,
    pub max_edition_supply: u64,
    pub is_mutable: bool,
    pub config_line_settings: Option<ConfigLineSettings>,
    pub hidden_settings: Option<HiddenSettings>,
}

/// Instruction builder.
#[derive(Default)]
pub struct InitializeCandyMachineBuilder {
    candy_machine: Option<solana_program::pubkey::Pubkey>,
    authority_pda: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    collection: Option<solana_program::pubkey::Pubkey>,
    collection_update_authority: Option<solana_program::pubkey::Pubkey>,
    mpl_core_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    items_available: Option<u64>,
    max_edition_supply: Option<u64>,
    is_mutable: Option<bool>,
    config_line_settings: Option<ConfigLineSettings>,
    hidden_settings: Option<HiddenSettings>,
}

impl InitializeCandyMachineBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Candy Machine account. The account space must be allocated to allow accounts larger
    /// than 10kb.
    ///
    #[inline(always)]
    pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
        self.candy_machine = Some(candy_machine);
        self
    }
    /// Authority PDA used to verify minted NFTs to the collection.
    ///
    #[inline(always)]
    pub fn authority_pda(&mut self, authority_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority_pda = Some(authority_pda);
        self
    }
    /// Candy Machine authority. This is the address that controls the upate of the candy machine.
    ///
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Payer of the transaction.
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Mint account of the collection.
    ///
    #[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    /// Update authority of the collection. This needs to be a signer so the candy
    /// machine can approve a delegate to verify minted NFTs to the collection.
    #[inline(always)]
    pub fn collection_update_authority(
        &mut self,
        collection_update_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_update_authority = Some(collection_update_authority);
        self
    }
    /// Token Metadata program.
    ///
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Instructions sysvar account.
    ///
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    #[inline(always)]
    pub fn items_available(&mut self, items_available: u64) -> &mut Self {
        self.items_available = Some(items_available);
        self
    }
    /// `[optional argument, defaults to '0']`
    #[inline(always)]
    pub fn max_edition_supply(&mut self, max_edition_supply: u64) -> &mut Self {
        self.max_edition_supply = Some(max_edition_supply);
        self
    }
    /// `[optional argument, defaults to 'true']`
    #[inline(always)]
    pub fn is_mutable(&mut self, is_mutable: bool) -> &mut Self {
        self.is_mutable = Some(is_mutable);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn config_line_settings(&mut self, config_line_settings: ConfigLineSettings) -> &mut Self {
        self.config_line_settings = Some(config_line_settings);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn hidden_settings(&mut self, hidden_settings: HiddenSettings) -> &mut Self {
        self.hidden_settings = Some(hidden_settings);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeCandyMachine {
            candy_machine: self.candy_machine.expect("candy_machine is not set"),
            authority_pda: self.authority_pda.expect("authority_pda is not set"),
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            collection: self.collection.expect("collection is not set"),
            collection_update_authority: self
                .collection_update_authority
                .expect("collection_update_authority is not set"),
            mpl_core_program: self.mpl_core_program.unwrap_or(solana_program::pubkey!(
                "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            sysvar_instructions: self.sysvar_instructions.unwrap_or(solana_program::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
        };
        let args = InitializeCandyMachineInstructionArgs {
            items_available: self
                .items_available
                .clone()
                .expect("items_available is not set"),
            max_edition_supply: self.max_edition_supply.clone().unwrap_or(0),
            is_mutable: self.is_mutable.clone().unwrap_or(true),
            config_line_settings: self.config_line_settings.clone(),
            hidden_settings: self.hidden_settings.clone(),
        };

        accounts.instruction(args)
    }
}

/// `initialize_candy_machine` CPI instruction.
pub struct InitializeCandyMachineCpi<'a> {
    /// The program to invoke.
    pub __program: &'a solana_program::account_info::AccountInfo<'a>,
    /// Candy Machine account. The account space must be allocated to allow accounts larger
    /// than 10kb.
    ///
    pub candy_machine: &'a solana_program::account_info::AccountInfo<'a>,
    /// Authority PDA used to verify minted NFTs to the collection.
    ///
    pub authority_pda: &'a solana_program::account_info::AccountInfo<'a>,
    /// Candy Machine authority. This is the address that controls the upate of the candy machine.
    ///
    pub authority: &'a solana_program::account_info::AccountInfo<'a>,
    /// Payer of the transaction.
    pub payer: &'a solana_program::account_info::AccountInfo<'a>,
    /// Mint account of the collection.
    ///
    pub collection: &'a solana_program::account_info::AccountInfo<'a>,
    /// Update authority of the collection. This needs to be a signer so the candy
    /// machine can approve a delegate to verify minted NFTs to the collection.
    pub collection_update_authority: &'a solana_program::account_info::AccountInfo<'a>,
    /// Token Metadata program.
    ///
    pub mpl_core_program: &'a solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'a solana_program::account_info::AccountInfo<'a>,
    /// Instructions sysvar account.
    ///
    pub sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeCandyMachineInstructionArgs,
}

impl<'a> InitializeCandyMachineCpi<'a> {
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9);
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection_update_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_instructions.key,
            false,
        ));
        let mut data = InitializeCandyMachineInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_CORE_CANDY_MACHINE_CORE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + 1);
        account_infos.push(self.__program.clone());
        account_infos.push(self.candy_machine.clone());
        account_infos.push(self.authority_pda.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.collection.clone());
        account_infos.push(self.collection_update_authority.clone());
        account_infos.push(self.mpl_core_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.sysvar_instructions.clone());

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// `initialize_candy_machine` CPI instruction builder.
pub struct InitializeCandyMachineCpiBuilder<'a> {
    instruction: Box<InitializeCandyMachineCpiBuilderInstruction<'a>>,
}

impl<'a> InitializeCandyMachineCpiBuilder<'a> {
    pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeCandyMachineCpiBuilderInstruction {
            __program: program,
            candy_machine: None,
            authority_pda: None,
            authority: None,
            payer: None,
            collection: None,
            collection_update_authority: None,
            mpl_core_program: None,
            system_program: None,
            sysvar_instructions: None,
            items_available: None,
            max_edition_supply: None,
            is_mutable: None,
            config_line_settings: None,
            hidden_settings: None,
        });
        Self { instruction }
    }
    /// Candy Machine account. The account space must be allocated to allow accounts larger
    /// than 10kb.
    ///
    #[inline(always)]
    pub fn candy_machine(
        &mut self,
        candy_machine: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine = Some(candy_machine);
        self
    }
    /// Authority PDA used to verify minted NFTs to the collection.
    ///
    #[inline(always)]
    pub fn authority_pda(
        &mut self,
        authority_pda: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority_pda = Some(authority_pda);
        self
    }
    /// Candy Machine authority. This is the address that controls the upate of the candy machine.
    ///
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Payer of the transaction.
    #[inline(always)]
    pub fn payer(&mut self, payer: &'a solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Mint account of the collection.
    ///
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    /// Update authority of the collection. This needs to be a signer so the candy
    /// machine can approve a delegate to verify minted NFTs to the collection.
    #[inline(always)]
    pub fn collection_update_authority(
        &mut self,
        collection_update_authority: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection_update_authority = Some(collection_update_authority);
        self
    }
    /// Token Metadata program.
    ///
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Instructions sysvar account.
    ///
    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    #[inline(always)]
    pub fn items_available(&mut self, items_available: u64) -> &mut Self {
        self.instruction.items_available = Some(items_available);
        self
    }
    /// `[optional argument, defaults to '0']`
    #[inline(always)]
    pub fn max_edition_supply(&mut self, max_edition_supply: u64) -> &mut Self {
        self.instruction.max_edition_supply = Some(max_edition_supply);
        self
    }
    /// `[optional argument, defaults to 'true']`
    #[inline(always)]
    pub fn is_mutable(&mut self, is_mutable: bool) -> &mut Self {
        self.instruction.is_mutable = Some(is_mutable);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn config_line_settings(&mut self, config_line_settings: ConfigLineSettings) -> &mut Self {
        self.instruction.config_line_settings = Some(config_line_settings);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn hidden_settings(&mut self, hidden_settings: HiddenSettings) -> &mut Self {
        self.instruction.hidden_settings = Some(hidden_settings);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> InitializeCandyMachineCpi<'a> {
        let args = InitializeCandyMachineInstructionArgs {
            items_available: self
                .instruction
                .items_available
                .clone()
                .expect("items_available is not set"),
            max_edition_supply: self.instruction.max_edition_supply.clone().unwrap_or(0),
            is_mutable: self.instruction.is_mutable.clone().unwrap_or(true),
            config_line_settings: self.instruction.config_line_settings.clone(),
            hidden_settings: self.instruction.hidden_settings.clone(),
        };

        InitializeCandyMachineCpi {
            __program: self.instruction.__program,

            candy_machine: self
                .instruction
                .candy_machine
                .expect("candy_machine is not set"),

            authority_pda: self
                .instruction
                .authority_pda
                .expect("authority_pda is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            collection: self.instruction.collection.expect("collection is not set"),

            collection_update_authority: self
                .instruction
                .collection_update_authority
                .expect("collection_update_authority is not set"),

            mpl_core_program: self
                .instruction
                .mpl_core_program
                .expect("mpl_core_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            sysvar_instructions: self
                .instruction
                .sysvar_instructions
                .expect("sysvar_instructions is not set"),
            __args: args,
        }
    }
}

struct InitializeCandyMachineCpiBuilderInstruction<'a> {
    __program: &'a solana_program::account_info::AccountInfo<'a>,
    candy_machine: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    authority_pda: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    collection: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    collection_update_authority: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    mpl_core_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    items_available: Option<u64>,
    max_edition_supply: Option<u64>,
    is_mutable: Option<bool>,
    config_line_settings: Option<ConfigLineSettings>,
    hidden_settings: Option<HiddenSettings>,
}
