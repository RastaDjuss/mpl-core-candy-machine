/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

/**
 * Guard that requires another Core Asset from a specific collection to be burned.
 *
 * List of accounts required:
 *
 * 0. `[writeable]` Address of the asset.
 * 1. `[writeable]` Address of the required collection.
 */

export type AssetBurn = { requiredCollection: PublicKey };

export type AssetBurnArgs = AssetBurn;

export function getAssetBurnSerializer(): Serializer<AssetBurnArgs, AssetBurn> {
  return struct<AssetBurn>([['requiredCollection', publicKeySerializer()]], {
    description: 'AssetBurn',
  }) as Serializer<AssetBurnArgs, AssetBurn>;
}
