/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';

/**
 * Gaurd to set a limit of mints per wallet based on holding a specific Core Asset.
 *
 * List of accounts required:
 *
 * 0. `[writable]` Mint counter PDA. The PDA is derived
 * using the seed `["asset_mint_limit", asset mint guard id, mint key,
 * candy guard pubkey, candy machine pubkey]`.
 * 1. `[]` Address the Core Asset.
 */

export type AssetMintLimit = {
  /** Unique identifier of the mint limit. */
  id: number;
  /** Limit of mints per individual mint address. */
  limit: number;
  /** Required collection of the mint. */
  requiredCollection: PublicKey;
};

export type AssetMintLimitArgs = AssetMintLimit;

export function getAssetMintLimitSerializer(): Serializer<
  AssetMintLimitArgs,
  AssetMintLimit
> {
  return struct<AssetMintLimit>(
    [
      ['id', u8()],
      ['limit', u16()],
      ['requiredCollection', publicKeySerializer()],
    ],
    { description: 'AssetMintLimit' }
  ) as Serializer<AssetMintLimitArgs, AssetMintLimit>;
}
