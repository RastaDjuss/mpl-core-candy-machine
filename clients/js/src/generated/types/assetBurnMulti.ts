/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

/**
 * Guard that requires a specific number of Assets from a specific collection to be burned.
 *
 * List of accounts required:
 *
 * 0. `[writeable]` Address of the collection.
 * x. `[writeable]` Address of the Asset(s).
 */

export type AssetBurnMulti = { requiredCollection: PublicKey; num: number };

export type AssetBurnMultiArgs = AssetBurnMulti;

export function getAssetBurnMultiSerializer(): Serializer<
  AssetBurnMultiArgs,
  AssetBurnMulti
> {
  return struct<AssetBurnMulti>(
    [
      ['requiredCollection', publicKeySerializer()],
      ['num', u8()],
    ],
    { description: 'AssetBurnMulti' }
  ) as Serializer<AssetBurnMultiArgs, AssetBurnMulti>;
}
