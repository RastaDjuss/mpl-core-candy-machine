/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';

/** PDA to track the number of mints for an individual address. */
export type NftMintCounter = Account<NftMintCounterAccountData>;

export type NftMintCounterAccountData = { count: number };

export type NftMintCounterAccountDataArgs = NftMintCounterAccountData;

export function getNftMintCounterAccountDataSerializer(): Serializer<
  NftMintCounterAccountDataArgs,
  NftMintCounterAccountData
> {
  return struct<NftMintCounterAccountData>([['count', u16()]], {
    description: 'NftMintCounterAccountData',
  }) as Serializer<NftMintCounterAccountDataArgs, NftMintCounterAccountData>;
}

export function deserializeNftMintCounter(
  rawAccount: RpcAccount
): NftMintCounter {
  return deserializeAccount(
    rawAccount,
    getNftMintCounterAccountDataSerializer()
  );
}

export async function fetchNftMintCounter(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftMintCounter> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'NftMintCounter');
  return deserializeNftMintCounter(maybeAccount);
}

export async function safeFetchNftMintCounter(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftMintCounter | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeNftMintCounter(maybeAccount) : null;
}

export async function fetchAllNftMintCounter(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftMintCounter[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'NftMintCounter');
    return deserializeNftMintCounter(maybeAccount);
  });
}

export async function safeFetchAllNftMintCounter(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftMintCounter[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeNftMintCounter(maybeAccount as RpcAccount)
    );
}

export function getNftMintCounterGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCandyGuardAsset',
    'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ count: number }>({ count: [0, u16()] })
    .deserializeUsing<NftMintCounter>((account) =>
      deserializeNftMintCounter(account)
    )
    .whereSize(2);
}

export function getNftMintCounterSize(): number {
  return 2;
}

export function findNftMintCounterPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** A unique identifier in the context of a NFT mint/Candy Machine/Candy Guard combo */
    id: number;
    /** The address of the NFT mint */
    mint: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplCandyGuardAsset',
    'CMAGAKJ67e9hRZgfC5SFTbZH8MgEmtqazKXjmkaJjWTJ'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('nft_mint_limit'),
    u8().serialize(seeds.id),
    publicKeySerializer().serialize(seeds.mint),
    publicKeySerializer().serialize(seeds.candyGuard),
    publicKeySerializer().serialize(seeds.candyMachine),
  ]);
}

export async function fetchNftMintCounterFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findNftMintCounterPda>[1],
  options?: RpcGetAccountOptions
): Promise<NftMintCounter> {
  return fetchNftMintCounter(
    context,
    findNftMintCounterPda(context, seeds),
    options
  );
}

export async function safeFetchNftMintCounterFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findNftMintCounterPda>[1],
  options?: RpcGetAccountOptions
): Promise<NftMintCounter | null> {
  return safeFetchNftMintCounter(
    context,
    findNftMintCounterPda(context, seeds),
    options
  );
}
